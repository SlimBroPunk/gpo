

local GJK = (function()
	local MAX_TRIES = 20
	local ZERO3 = Vector3.new(0, 0, 0)
	
	-- Class
	
	local GJK = {}
	GJK.__index = GJK
	
	-- Private Functions
	
	local function tripleProduct(a, b, c)
		return b * c:Dot(a) - a * c:Dot(b)
	end
	
	local function containsOrigin(self, simplex, direction)
		local a = simplex[#simplex]
		local ao = -a
	
		if (#simplex == 4) then
			local b, c, d = simplex[3], simplex[2], simplex[1]
			local ab, ac, ad = b - a, c - a, d - a
			local abc, acd, adb = ab:Cross(ac), ac:Cross(ad), ad:Cross(ab)
			
			abc = abc:Dot(ad) > 0 and -abc or abc
			acd = acd:Dot(ab) > 0 and -acd or acd
			adb = adb:Dot(ac) > 0 and -adb or adb
			
			if (abc:Dot(ao) > 0) then
				table.remove(simplex, 1)
				direction = abc
			elseif (acd:Dot(ao) > 0) then
				table.remove(simplex, 2)
				direction = acd
			elseif (adb:Dot(ao) > 0) then
				table.remove(simplex, 3)
				direction = adb
			else
				return true
			end
		elseif (#simplex == 3) then
			local b, c = simplex[2], simplex[1]
			local ab, ac = b - a, c - a
			
			local abc = ab:Cross(ac)
			local abPerp = tripleProduct(ac, ab, ab).Unit
			local acPerp = tripleProduct(ab, ac, ac).Unit
			
			if (abPerp:Dot(ao) > 0) then
				table.remove(simplex, 1)
				direction = abPerp
			elseif (acPerp:Dot(ao) > 0) then
				table.remove(simplex, 2)
				direction = acPerp
			else
				local isV3 = ((a - a) == ZERO3)
				if (not isV3) then
					return true
				else
					direction = abc:Dot(ao) > 0 and abc or -abc
				end
			end
		else
			local b = simplex[1]
			local ab = b - a
			local bcPerp = tripleProduct(ab, ao, ab).Unit
			direction = bcPerp
		end
		
		return false, direction
	end
	
	-- Public Constructors
	
	function GJK.new(SetA, SetB, CentroidA, CentroidB, SupportA, SupportB)
		local self = setmetatable({}, GJK)
		
		self.SetA = SetA
		self.SetB = SetB
		self.CentroidA = CentroidA
		self.CentroidB = CentroidB
		self.SupportA = SupportA
		self.SupportB = SupportB
	
		return self
	end
	
	-- Public Methods
	
	function GJK:IsColliding()
		local direction = (self.CentroidA - self.CentroidB).Unit
		local simplex = {self.SupportA(self.SetA, direction) - self.SupportB(self.SetB, -direction)}
		
		direction = -direction
		
		for i = 1, MAX_TRIES do
			table.insert(simplex, self.SupportA(self.SetA, direction) - self.SupportB(self.SetB, -direction))
			
			if (simplex[#simplex]:Dot(direction) <= 0) then
				return false
			else
				local passed, newDirection = containsOrigin(self, simplex, direction)
				
				if (passed) then
					return true
				end
				
				direction = newDirection
			end
		end
		
		return false
	end
	
	--
	
	return GJK
end)()
local Supports = (function()
	local ZERO = Vector3.new(0, 0, 0)
	local RIGHT = Vector3.new(1, 0, 0)

	--
	
	local function rayPlane(p, v, s, n)
		local r = p - s;
		local t = -r:Dot(n) / v:Dot(n)
		return p + t * v, t
	end;
	
	--
	
	local Supports = {}
	
	function Supports.PointCloud(set, direction)
		local max, maxDot = set[1], set[1]:Dot(direction)
		for i = 2, #set do
			local dot = set[i]:Dot(direction)
			if (dot > maxDot) then
				max = set[i]
				maxDot = dot
			end
		end
		return max
	end
	
	function Supports.Cylinder(set, direction)
		local cf, size2 = unpack(set)
		direction = cf:VectorToObjectSpace(direction)
		local radius = math.min(size2.y, size2.z)
		local dotT, cPoint = direction:Dot(RIGHT), Vector3.new(size2.x, 0, 0)
		local h, t, final
		
		if (dotT == 0) then
			final = direction.Unit * radius
		else
			cPoint = dotT > 0 and cPoint or -cPoint
			h, t = rayPlane(ZERO, direction, cPoint, RIGHT)
			final = cPoint + (h - cPoint).Unit * radius
		end
		
		return cf:PointToWorldSpace(final)
	end
	
	function Supports.Ellipsoid(set, direction)
		local cf, size2 = unpack(set)
		return cf:PointToWorldSpace(size2 * (size2 * cf:VectorToObjectSpace(direction)).Unit)
	end
	
	return Supports
end)()
local Vertices = (function()
	-- CONSTANTS

	local PI2 = math.pi*2
	local PHI = (1 + math.sqrt(5)) / 2
	
	local RIGHT 	= Vector3.new(1, 0, 0)
	local UP 		= Vector3.new(0, 1, 0)
	local BACK 		= Vector3.new(0, 0, 1)
	local LEFT 		= Vector3.new(-1, 0, 0)
	local DOWN 		= Vector3.new(0, -1, 0)
	local FORWARD 	= Vector3.new(0, 0, -1)
	
	local CORNERS = {
		Vector3.new(1, 1, 1);
		Vector3.new(-1, 1, 1);
		Vector3.new(-1, 1, -1);
		Vector3.new(1, 1, -1);
		Vector3.new(1, -1, 1);
		Vector3.new(-1, -1, 1);
		Vector3.new(-1, -1, -1);
		Vector3.new(1, -1, -1);
	}
	
	-- VERTICE INDEX ARRAYS
	
	local BLOCK = {1, 2, 3, 4, 5, 6, 7, 8}
	local WEDGE = {1, 2, 5, 6, 7, 8}
	local CORNERWEDGE = {4, 5, 6, 7, 8}
	
	-- VERTICE FUNCTIONS
	
	local function fromIndexArray(array)
		local output = {}
		for i = 1, #array do
			output[i] = CORNERS[array[i]]
		end
		return output
	end
	
	local function cylinder(n)
		local output = {}
		local arc = PI2 / n
		for i = 1, n do
			local vi = CFrame.fromAxisAngle(RIGHT, i*arc) * UP
			output[i] = RIGHT + vi
			output[n + i] = LEFT + vi
		end
		return output
	end
	
	local function icoSphere(n)
		local verts = {
			Vector3.new(-1,  PHI, 0),
			Vector3.new(1,  PHI, 0),
			Vector3.new(-1, -PHI, 0),
			Vector3.new(1, -PHI, 0),
			
			Vector3.new(0, -1,  PHI),
			Vector3.new(0,  1,  PHI),
			Vector3.new(0, -1, -PHI),
			Vector3.new(0,  1, -PHI),
			
			Vector3.new(PHI, 0, -1),
			Vector3.new(PHI, 0,  1),
			Vector3.new(-PHI, 0, -1),
			Vector3.new(-PHI, 0,  1)
		}
		
		local indices = {
			1, 12, 6,
			1, 6, 2,
			1, 2, 8,
			1, 8, 11,
			1, 11, 12,
			
			2, 6, 10,
			6, 12, 5,
			12, 11, 3,
			11, 8, 7,
			8, 2, 9,
			
			4, 10, 5,
			4, 5, 3,
			4, 3, 7,
			4, 7, 9,
			4, 9, 10,
			
			5, 10, 6,
			3, 5, 12,
			7, 3, 11,
			9, 7, 8,
			10, 9, 2
		}
		
		local splits = {}
		
		local function split(i, j)
			local key = i < j and (i .. "," .. j) or (j .. "," .. i)
			
			if (not splits[key]) then
				verts[#verts+1] = (verts[i] + verts[j]) / 2
				splits[key] = #verts
			end
			
			return splits[key]
		end
		
		for _ = 1, n do
			for  i = #indices, 1, -3 do
				local v1, v2, v3 = indices[i - 2], indices[i - 1], indices[i]
				local a = split(v1, v2)
				local b = split(v2, v3)
				local c = split(v3, v1)
				
				indices[#indices+1] = v1
				indices[#indices+1] = a
				indices[#indices+1] = c
				
				indices[#indices+1] = v2
				indices[#indices+1] = b
				indices[#indices+1] = a
				
				indices[#indices+1] = v3
				indices[#indices+1] = c
				indices[#indices+1] = b
				
				indices[#indices+1] = a
				indices[#indices+1] = b
				indices[#indices+1] = c
				
				table.remove(indices, i)
				table.remove(indices, i - 1)
				table.remove(indices, i - 2)
			end
		end
		
		-- normalize
		for i = 1, #verts do
			verts[i] = verts[i].Unit
		end
		
		return verts
	end
	
	-- Useful functions
	
	local function vertShape(cf, size2, array)
		local output = {}
		for i = 1, #array do
			output[i] = cf:PointToWorldSpace(array[i] * size2)
		end
		return output
	end
	
	local function getCentroidFromSet(set)
		local sum = set[1]
		for i = 2, #set do
			sum = sum + set[2]
		end
		return sum / #set
	end
	
	local function classify(part)
		if (part.ClassName == "Part") then
			if (part.Shape == Enum.PartType.Block) then
				return "Block"
			elseif (part.Shape == Enum.PartType.Cylinder) then
				return "Cylinder"
			elseif (part.Shape == Enum.PartType.Ball) then
				return "Ball"
			end;
		elseif (part.ClassName == "WedgePart") then
			return "Wedge"
		elseif (part.ClassName == "CornerWedgePart") then
			return "CornerWedge"
		elseif (part:IsA("BasePart")) then -- mesh, CSG, truss, etc... just use block
			return "Block"
		end
	end
	
	-- 
	
	local BLOCK_ARRAY = fromIndexArray(BLOCK)
	local WEDGE_ARRAY = fromIndexArray(WEDGE)
	local CORNERWEDGE_ARRAY = fromIndexArray(CORNERWEDGE)
	local CYLINDER_ARRAY = cylinder(20)
	local SPHERE_ARRAY = icoSphere(2)
	
	return {
		Block = function(cf, size2) return vertShape(cf, size2, BLOCK_ARRAY) end;
		Wedge = function(cf, size2) return vertShape(cf, size2, WEDGE_ARRAY) end;
		CornerWedge = function(cf, size2) return vertShape(cf, size2, CORNERWEDGE_ARRAY) end;
		Cylinder = function(cf, size2) return vertShape(cf, size2, CYLINDER_ARRAY) end;
		Ball = function(cf, size2) return vertShape(cf, size2, SPHERE_ARRAY) end;
		
		GetCentroid = getCentroidFromSet;
		Classify = classify;
	}
end)()


local RotatedRegion3 = {}
RotatedRegion3.__index = RotatedRegion3


local function getCorners(cf, s2)
	return {
		cf:PointToWorldSpace(Vector3.new(-s2.x, s2.y, s2.z));
		cf:PointToWorldSpace(Vector3.new(-s2.x, -s2.y, s2.z));
		cf:PointToWorldSpace(Vector3.new(-s2.x, -s2.y, -s2.z));
		cf:PointToWorldSpace(Vector3.new(s2.x, -s2.y, -s2.z));
		cf:PointToWorldSpace(Vector3.new(s2.x, s2.y, -s2.z));
		cf:PointToWorldSpace(Vector3.new(s2.x, s2.y, s2.z));
		cf:PointToWorldSpace(Vector3.new(s2.x, -s2.y, s2.z));
		cf:PointToWorldSpace(Vector3.new(-s2.x, s2.y, -s2.z));
	}
end

local function worldBoundingBox(set)
	local x, y, z = {}, {}, {}
	for i = 1, #set do x[i], y[i], z[i] = set[i].x, set[i].y, set[i].z end
	local min = Vector3.new(math.min(unpack(x)), math.min(unpack(y)), math.min(unpack(z)))
	local max = Vector3.new(math.max(unpack(x)), math.max(unpack(y)), math.max(unpack(z)))
	return min, max
end


function RotatedRegion3.new(cframe, size)
	local self = setmetatable({}, RotatedRegion3)
	
	self.CFrame = cframe
	self.Size = size
	self.Shape = "Block"
	
	self.Set = Vertices.Block(cframe, size/2)
	self.Support = Supports.PointCloud
	self.Centroid = cframe.p
	
	self.AlignedRegion3 = Region3.new(worldBoundingBox(self.Set))

	return self
end
RotatedRegion3.Block = RotatedRegion3.new
function RotatedRegion3.Wedge(cframe, size)
	local self = setmetatable({}, RotatedRegion3)

	self.CFrame = cframe
	self.Size = size
	self.Shape = "Wedge"
	
	self.Set = Vertices.Wedge(cframe, size/2)
	self.Support = Supports.PointCloud
	self.Centroid = Vertices.GetCentroid(self.Set)
	
	self.AlignedRegion3 = Region3.new(worldBoundingBox(self.Set))

	return self
end

function RotatedRegion3.CornerWedge(cframe, size)
	local self = setmetatable({}, RotatedRegion3)

	self.CFrame = cframe
	self.Size = size
	self.Shape = "CornerWedge"
	
	self.Set = Vertices.CornerWedge(cframe, size/2)
	self.Support = Supports.PointCloud
	self.Centroid = Vertices.GetCentroid(self.Set)
	
	self.AlignedRegion3 = Region3.new(worldBoundingBox(self.Set))

	return self
end

function RotatedRegion3.Cylinder(cframe, size)
	local self = setmetatable({}, RotatedRegion3)

	self.CFrame = cframe
	self.Size = size
	self.Shape = "Cylinder"
	
	self.Set = {cframe, size/2}
	self.Support = Supports.Cylinder
	self.Centroid = cframe.p
	
	self.AlignedRegion3 = Region3.new(worldBoundingBox(getCorners(unpack(self.Set))))

	return self
end

function RotatedRegion3.Ball(cframe, size)
	local self = setmetatable({}, RotatedRegion3)

	self.CFrame = cframe
	self.Size = size
	self.Shape = "Ball"
	
	self.Set = {cframe, size/2}
	self.Support = Supports.Ellipsoid
	self.Centroid = cframe.p
	
	self.AlignedRegion3 = Region3.new(worldBoundingBox(getCorners(unpack(self.Set))))

	return self
end

function RotatedRegion3.FromPart(part)
	return RotatedRegion3[Vertices.Classify(part)](part.CFrame, part.Size)
end
function RotatedRegion3:CastPoint(point)
	local gjk = GJK.new(self.Set, {point}, self.Centroid, point, self.Support, Supports.PointCloud)
	return gjk:IsColliding()
end

function RotatedRegion3:CastPart(part)
	local r3 = RotatedRegion3.FromPart(part)
	local gjk = GJK.new(self.Set, r3.Set, self.Centroid, r3.Centroid, self.Support, r3.Support)
	return gjk:IsColliding()
end

function RotatedRegion3:FindPartsInRegion3(ignore, maxParts)
	local found = {}
	local parts = game.Workspace:FindPartsInRegion3(self.AlignedRegion3, ignore, maxParts)
	for i = 1, #parts do
		if (self:CastPart(parts[i])) then
			table.insert(found, parts[i])
		end
	end
	return found
end

function RotatedRegion3:FindPartsInRegion3WithIgnoreList(ignore, maxParts)
	ignore = ignore or {}
	local found = {}
	local parts = game.Workspace:FindPartsInRegion3WithIgnoreList(self.AlignedRegion3, ignore, maxParts)
	for i = 1, #parts do
		if (self:CastPart(parts[i])) then
			table.insert(found, parts[i])
		end
	end
	return found
end

function RotatedRegion3:FindPartsInRegion3WithWhiteList(whiteList, maxParts)
	whiteList = whiteList or {}
	local found = {}
	local parts = game.Workspace:FindPartsInRegion3WithWhiteList(self.AlignedRegion3, whiteList, maxParts)
	for i = 1, #parts do
		if (self:CastPart(parts[i])) then
			table.insert(found, parts[i])
		end
	end
	return found
end

function RotatedRegion3:Cast(ignore, maxParts)
	ignore = type(ignore) == "table" and ignore or {ignore}
	return self:FindPartsInRegion3WithIgnoreList(ignore, maxParts)
end

